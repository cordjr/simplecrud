// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.

using System;
using System.Data.Common;
using System.Data.SqlClient;
using SimpleCrud.ADO;
using SimpleCrud.Core;
using SimpleCrud.Types;
using NUnit.Framework;
using System.Diagnostics;


namespace SimpleCrud.Test {
    /// <summary>
    ///This is a test class for SimpleCrud.ADO.ADOSession and is intended
    ///to contain all SimpleCrud.ADO.ADOSession Unit Tests
    ///</summary>
    [TestFixture]
    public class SQLServerSessionTest {
        public SQLServerSessionTest() {
            ConfigurePessoa();
            ConfigureItem();
        }

        private DbConnection cnn;

        private DbConnection GetConnection() {
            if (cnn == null) {
                string cnnString = "Server=127.0.0.1; Initial Catalog=TestSimpleCrud;Integrated Security=SSPI";
                cnn = new SqlConnection(cnnString);
                cnn.Open();
            }
            return cnn;

        }

        private void ConfigurePessoa() {
            SimpleConfig config = new SimpleConfig(typeof(Pessoa), "Pessoa");
            config.AddField("Id", Types.Types.INT_TYPE, true)
                .AddField("Nome", Types.Types.STRING_TYPE)
                    .AddField("DataNasc", Types.Types.DATE_TIME);
            config.AddJoin(typeof(Item), "items", "Items", "Idpessoa", "Id");
            ConfigManager.GetInstance().AddConfig(typeof(Pessoa), config);




        }

        private void ConfigureItem() {
            SimpleConfig config = new SimpleConfig(typeof(Item), "items");
            config.AddField("Id", Types.Types.INT_TYPE, true)
                .AddField("Desc", "Descr", Types.Types.STRING_TYPE)
                    .AddField("Preco", "valor", Types.Types.DECIMAL_TYPE);
            ConfigManager.GetInstance().AddConfig(typeof(Item), config);
        }


        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion




        [Test]
        public void getTest() {


            SQLServerSession target = new SQLServerSession(GetConnection());




            Pessoa obj = new Pessoa(); // TODO: Initialize to an appropriate value
            obj.Id = 55;

            bool expected = true;
            bool actual;
            try {
                actual = target.Get(obj);
            } catch (Exception ex) {
                throw ex;
            }

            Assert.AreEqual(expected, actual, "SimpleCrud.ADO.ADOSession.get did not return the expected value.");

        }

        [Test]
        public void GetWithFullJoinTest() {
            SQLServerSession target = new SQLServerSession(GetConnection());




            Pessoa obj = new Pessoa(); // TODO: Initialize to an appropriate value
            obj.Id = 55;



            try {
                target.GetWithFulljoin(obj);
                Assert.AreEqual(obj.Items.Count, 3);
            } catch (Exception ex) {
                Debug.WriteLine(ex.StackTrace);

                Assert.Fail(ex.StackTrace);
                throw ex;
            }


        }
        [Test]
        public void testInsert() {
            SQLServerSession session = new SQLServerSession(GetConnection());

            Pessoa pessoa1 = new Pessoa(); // TODO: Initialize to an appropriate value
            pessoa1.Id = 56;
            pessoa1.DataNasc = DateTime.Parse("01/12/1978");
            pessoa1.Nome = "João Da Silva Sauro";
            session.Insert(pessoa1);
            Pessoa pessoa2 = new Pessoa(); // TODO: Initialize to an appropriate value
            pessoa2.Id = 56;
            session.Get(pessoa2);
            session.Delete(pessoa2);

            Assert.IsTrue(IsPessoaEqual(pessoa1, pessoa2));


        }
        [Test]
        public void testUpdate() {
            SQLServerSession session = new SQLServerSession(GetConnection());

            Pessoa pessoa = new Pessoa(); // TODO: Initialize to an appropriate value
            pessoa.Id = 55;
            session.Get(pessoa);
            pessoa.Nome += "_alterado com sucesso";
            String nome_alterado = pessoa.Nome;
            session.Update(pessoa);
            session.Get(pessoa);
            Assert.IsTrue(nome_alterado.Trim().Equals(pessoa.Nome.Trim()));

        }

        [Test]
        public void testDelete() {
            SQLServerSession session = new SQLServerSession(GetConnection());

            Pessoa pessoa = new Pessoa(); // TODO: Initialize to an appropriate value
            pessoa.Id = 100;
            session.Get(pessoa);
            pessoa.Nome += "Pessoa que vai ser alterada";
            String nome_alterado = pessoa.Nome;
            session.Insert(pessoa);
            session.Delete(pessoa);
            
            Assert.IsFalse(session.Get(pessoa));

        }


        private bool IsPessoaEqual(Pessoa pessoa1, Pessoa pessoa2) {
            return (pessoa1.Id == pessoa2.Id && pessoa1.Nome.Trim().
                Equals(pessoa2.Nome.Trim()) &&
                    pessoa1.DataNasc == pessoa2.DataNasc);
        }


    }


}
