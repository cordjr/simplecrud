// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SqlClient;
using SimpleCrud.ADO;
using SimpleCrud.Core;
using SimpleCrud.Types;
namespace SimpleCrudTest {
    /// <summary>
    ///This is a test class for SimpleCrud.ADO.ADOSession and is intended
    ///to contain all SimpleCrud.ADO.ADOSession Unit Tests
    ///</summary>
    [TestClass()]
    public class SQLServerSessionTest {


        private TestContext testContextInstance;

        private DbConnection GetConnection() {
            string cnnString = "Server=127.0.0.1; Initial Catalog=TestSimpleCrud;Integrated Security=SSPI";
            SqlConnection cnn = new SqlConnection(cnnString);
            cnn.Open();
            return cnn;

        }

        private void ConfigurePessoa() {
            SimpleConfig config = new SimpleConfig(typeof(Pessoa), "Pessoa");
            config.AddField("Id", new IntType(), true)
                .AddField("Nome", new StringType())
                    .AddField("DataNasc", new DateTimeType());
            config.AddJoin(typeof(Item), "items", "Items", "pessoaId", "Id");
            ConfigManager.GetInstance().AddConfig(typeof(Pessoa), config);




        }
        private void ConfigureItem() {
            SimpleConfig config = new SimpleConfig(typeof(Item), "items");
            config.AddField("Id", new IntType(), true)
                .AddField("Desc", new StringType())
                    .AddField("preco", "valor", new  DecimalType());
            ConfigManager.GetInstance().AddConfig(typeof(Item), config);
        }

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext {
            get {
                return testContextInstance;
            }
            set {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for get (object)
        ///</summary>
        [TestMethod()]
        public void getTest() {


            SQLServerSession target = new SQLServerSession(GetConnection());
            ConfigurePessoa();



            Pessoa obj = new Pessoa(); // TODO: Initialize to an appropriate value
            obj.Id = 55;

            bool expected = true;
            bool actual;
            try {
                actual = target.Get(obj);
            } catch (Exception ex) {
                throw ex;
            }

            Assert.AreEqual(expected, actual, "SimpleCrud.ADO.ADOSession.get did not return the expected value.");

        }
        [TestMethod]
        public void GetWithFullJoinTest() {
            SQLServerSession target = new SQLServerSession(GetConnection());
            ConfigurePessoa();
            ConfigureItem();



            Pessoa obj = new Pessoa(); // TODO: Initialize to an appropriate value
            obj.Id = 55;



            try {
                target.GetWithFulljoin(obj);
            } catch (Exception ex) {
                Console.Out.WriteLine(ex.StackTrace); 
                throw ex;
            }
            


        }

    }


}
